// Using MergeSort to determine the time required to sort element. 
# include <iostream>
# include <stdlib.h>
# include <time.h>
# include <string.h>

using namespace std;

void Merge(int a[], int low, int mid, int high)
{
    int i, j, k, b[20];
    i=low; j=mid+1; k=low;
    while ( i<=mid && j<=high )
{
    if( a[i] <= a[j] )
        b[k++] = a[i++] ;
    else
        b[k++] = a[j++] ;
}
    while (i<=mid)
        b[k++] = a[i++] ;
    while (j<=high)
        b[k++] = a[j++] ;
    for(k=low; k<=high; k++)
        a[k] = b[k];
}
void MergeSort(int a[], int low, int high)
{
    int mid;
    if(low >= high)
    return;
    mid = (low+high)/2 ;
    MergeSort(a, low, mid);
    MergeSort(a, mid+1, high);
    Merge(a, low, mid, high);
}
 main()
{
    int n, a[2000],k;
    clock_t st,et;
    double ts;
    void ClearScreen();
    cout<<"\n Enter How many Numbers:";
    cin>> n;
    cout<<"\nThe Random Numbers are:\n";
    for(k=1; k<=n; k++)
{
    a[k]=rand();
    cout<< a[k];
}
    st=clock();
    MergeSort(a, 1, n);
    et=clock();
    ts=(double)(et-st)/CLOCKS_PER_SEC;
    cout<<"\n Sorted Numbers are : \n ";
    for(k=1; k<=n; k++)
    cout<< a[k];
    cout<<"\nThe time taken is %e"<<ts;
    void getch();
}
